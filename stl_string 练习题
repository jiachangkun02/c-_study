leetcode 917 仅仅反转字母
给你一个字符串 s ，根据下述规则反转字符串：

所有非英文字母保留在原有位置。
所有英文字母（小写或大写）位置反转。
返回反转后的 s 。


示例 1：

输入：s = "ab-cd"
输出："dc-ba"
示例 2：

输入：s = "a-bC-dEf-ghIj"
输出："j-Ih-gfE-dCba"
示例 3：

输入：s = "Test1ng-Leet=code-Q!"
输出："Qedo1ct-eeLg=ntse-T!

solution：
class Solution {
public:
    
    string reverseOnlyLetters(string s) {
        int begin=0,end=s.size()-1;
        while(begin<end)
        {
            while(begin<end &&!((s[begin]>='a' && s[begin]<='z') || (s[begin]>='A' && s[begin]<='Z')))
            {
                ++begin;
            }
            while( begin<end && !((s[end]>='a' && s[end]<='z') || (s[end]>='A' && s[end]<='Z')))
            {
                --end;
            }

            swap(s[begin],s[end]);
            begin++;
            end--;
            
        }
        return s;

    }
};


leetcode 415 字符串相加

给定两个字符串形式的非负整数 num1 和num2 ，计算它们的和并同样以字符串形式返回。

你不能使用任何內建的用于处理大整数的库（比如 BigInteger）， 也不能直接将输入的字符串转换为整数形式。

 
示例 1：

输入：num1 = "11", num2 = "123"
输出："134"
示例 2：

输入：num1 = "456", num2 = "77"
输出："533"
示例 3：

输入：num1 = "0", num2 = "0"
输出："0"



solution：
class Solution {
public:
    string addStrings(string num1, string num2) {
        
        string flag="";
        
        int i=num1.size()-1,j=num2.size()-1,sum=0;

        while(1)
        {
            if(i>=0)sum+=(num1[i--]-'0');
            if(j>=0) sum+=(num2[j--]-'0');
            flag.push_back( char(sum % 10 +'0'));
            sum/=10;
            
            if(i<0&& j<0&& sum==0) break;
        }
        while (sum > 0)
        {
            flag.push_back(char(sum % 10 + '0'));
            sum /= 10;
        }
        return string(flag.rbegin(), flag.rend());
    }
};

leetcode  387 字符串中的第一个唯一字符

给定一个字符串 s ，找到 它的第一个不重复的字符，并返回它的索引 。如果不存在，则返回 -1 。

示例 1：

输入: s = "leetcode"
输出: 0
示例 2:

输入: s = "loveleetcode"
输出: 2
示例 3:

输入: s = "aabb"
输出: -1
 
提示:

1 <= s.length <= 105
s 只包含小写字母

//朴素的桶排序思想
class Solution {
public:
    int firstUniqChar(string s) {
        int count[26]={0};
       
        for(auto ch: s)
        {
            count[ch-'a']++;
        }

        for(size_t i=0;i<s.size();++i)
        {
            if(count[s[i]-'a']==1)
            {   return i;}
            
        }

        return  -1;
        
    }
};




